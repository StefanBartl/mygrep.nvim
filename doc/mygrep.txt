help_text = """*mygrep.txt*     mygrep.nvim doc     Last Change:  May 30, 2025

==============================================================================
INTRODUCTION                                                         *:Mygrep*

mygrep.nvim is a Telescope-based grep memory layer. It allows you to use
tools like `live_grep` or `multigrep` and automatically remembers your search
queries, favorites, and persistent patterns – even across sessions.

==============================================================================
USAGE                                                                  *usage*

To run a registered grep tool:

    :Mygrep <tool>

If no tool is provided, a picker will show all available tools. The UI
used for tool selection depends on the `tool_picker_style` setting.

Examples:

    :Mygrep live_grep
    :Mygrep                 " Show selector (floating or select-based)

You can configure mygrep with:

>lua
  require("mygrep").setup({
    tool_picker_style = "select",  -- or "ui" (default)
    keymaps = {
      open = "<leader>gr",
      live_grep = "<leader>ml",
      multigrep = "<leader>mm",
    },
  })
<

Registered tools:
- |mygrep-live_grep|
- |mygrep-multigrep|

==============================================================================
KEYBINDINGS                                                      *keybindings*

Default normal-mode mappings (see |mygrep.keymaps|):

    <leader><leader>    Open interactive tool selector (same as :Mygrep)
    <leader>ml          Run live_grep
    <leader>mm          Run multigrep

These mappings can be overridden using `setup({ keymaps = { ... } })`.

==============================================================================
PICKER INTERACTIONS                                            *mygrep-picker*

When inside a grep picker (e.g., live_grep):

- <CR>       Execute search and save query in memory
- <C-o>      Open history picker
- <C-n>      Next previous search (cycle through history, favorites, persist)
- <C-p>      Previous search (cycle backward through all saved queries)

In the history picker:

- <Tab>      Toggle state:
               → S →  (Favorite)
               →  →  (Persistent)
               →  → remove
- <S-Tab>    Reverse toggle:
               →  → 
               →  → S
- <C-d>      Remove query from history entirely
- <C-Up>     Move query up within its section
- <C-Down>   Move query down within its section
- <Esc>      Return to main picker with restored prompt
- <CR>       Re-run the selected query

Symbol legend:

            Favorite
            Persistent (stored in JSON)
    S         Session (in-memory only)

==============================================================================
ROOT DIRECTORY SWITCHING                                         *mygrep-root*

mygrep.nvim allows you to change the current working directory for all
registered tools. This enables flexible searching across different scopes.

Available options:

       Project directory (default)
    󰋞   Home directory (~)
    󰜉   Filesystem root (/)
       Custom path (manually entered)

To open the directory switcher manually:

>lua
  require("mygrep.context.search_root").select()
<

Inside pickers, the root selector is also bound to:

    <F5>        Open root switch menu

Changing the root will update the active directory for all future queries.

==============================================================================
EXTENDING                                             *mygrep.core.registry*

To register your own tool:

>lua
  require("mygrep.core.registry").register("mytool", {
    name = "mytool",
    run = function()
      require("telescope.builtin").grep_string({
        search = "",
        only_cwd = false,
      })
    end,
  })
<

==============================================================================
MEMORY SYSTEM                                            *mygrep.core.history*

mygrep.nvim stores search queries automatically and organizes them into
three categories:

    S   Session-only → remembered until Neovim exits
       Favorites    → manually marked entries
       Persistent   → saved to disk and restored across sessions

When you submit a query (<CR>), it is added to session memory if not already
present. You can toggle the state of saved entries via the 
history picker (|mygrep-picker|):

    <Tab>     S →  →  → (removed)
    <S-Tab>   (reverse)
    <C-d>     Delete entry entirely

Favorites and persistent entries are prioritized in display order.

Storage location:

    $XDG_DATA_HOME/mygrep/<tool>.json

For example:

    ~/.local/share/nvim/mygrep/live_grep.json

Each tool manages its own independent history. The memory layer is handled
internally by |mygrep.core.history| and can be accessed by custom tools via:

>lua
  local state = require("mygrep.core.history").get("toolname")
  require("mygrep.core.history").add_history(state, query)

<
See also:

|mygrep-picker|  – for all interactive history actions
|mygrep-root|    – memory is relative to current search root

==============================================================================
LIVE_GREP USAGE                                              *mygrep-livegrep*

`live_grep` provides fast full-text search using Telescope's built-in
|telescope.builtin.live_grep|.

Format:

    <search_term>

Real-time search as you type (ripgrep-powered). It's ideal for general-purpose 
search across all files in the current root (see |mygrep-root|).

Examples:

    TODO              → search all files for "TODO"
    init              → find all files mentioning "init"
    config            → list all lines matching "config"

Live Grep is suitable for most use cases where filename filtering is not
required. For structured queries, see |mygrep-multigrep|.

=============================================================================
MULTIGREP USAGE                                            *mygrep-multigrep*

`multigrep` extends `live_grep` by allowing an optional file glob after
the search query.

Format:

    <search_term>  <file_glob>

The pattern and glob must be separated by TWO spaces. 
Globs follow ripgrep (-g) syntax.

Examples:

    TODO              → search "TODO" in all files
    TODO  *.lua       → restrict to Lua files
    error  **/*.ts    → recursive search in .ts files
    init  init*.lua   → match files like "init_config.lua"
    button  **/*.css  → only CSS files
    API  docs/*.md    → only markdown files in docs/

Multi-extension:

    main  *.{js,ts}   → .js and .ts files

Globs reference:
> https://github.com/BurntSushi/ripgrep/blob/master/GLOB.md

==============================================================================
CREDITS

Created by Stefan Bartl
Inspired by Telescope.nvim

==============================================================================
SEE ALSO

|:Mygrep|             Command entry point
|usage|
|keybindings|
|mygrep-picker|       Keybindings and interactions inside pickers
|mygrep-root|         Changing the search root (cwd, /, ~, custom)
|mygrep.core.registry|Tool registration API
|mygrep.core.history| Memory system (session, favorites, persist)
|mygrep-livegrep|     Live grep usage and behavior
|mygrep-multigrep|    Multigrep input format and examples

vim:tw=78:ts=8:ft=help:norl:

